apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: first-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4, pipelines.kubeflow.org/pipeline_compilation_time: '2021-07-02T00:46:38.899357',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "describe this", "name":
      "First Pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4}
spec:
  entrypoint: first-pipeline
  templates:
  - name: download-records
    container:
      args: [--output-dir, /tmp/outputs/output_dir/data, --pipeline-config, /tmp/outputs/pipeline_config/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def download_records(
            output_dir_path,
            pipeline_config_path,
        ):
            import subprocess
            import sys
            subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])

            import os, requests
            os.makedirs(output_dir_path, exist_ok=True)

            train_data_path = os.path.join(output_dir_path, 'licence_train.record-00000-of-00001')
            with open(train_data_path, 'wb') as file_obj:
                r = requests.get('https://www.dropbox.com/s/6ycrfedafx61kt2/licence_train.record-00000-of-00001?dl=0')
                file_obj.write(r.content)

            val_data_path = os.path.join(output_dir_path, 'licence_val.record-00000-of-00001')
            with open(val_data_path, 'wb') as file_obj:
                r = requests.get('https://www.dropbox.com/s/6fzvm2xe5dmvcld/licence_val.record-00000-of-00001?dl=0')
                file_obj.write(r.content)

            with open(pipeline_config_path, 'wb') as file:
                r = request.get("https://www.dropbox.com/s/33fjknt0p70vpdm/license.py?dl=0")
                file.write(r.content)

        import argparse
        _parser = argparse.ArgumentParser(prog='Download records', description='')
        _parser.add_argument("--output-dir", dest="output_dir_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--pipeline-config", dest="pipeline_config_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = download_records(**_parsed_args)
      image: python:3.7
    outputs:
      parameters:
      - name: download-records-output_dir
        valueFrom: {path: /tmp/outputs/output_dir/data}
      - name: download-records-pipeline_config
        valueFrom: {path: /tmp/outputs/pipeline_config/data}
      artifacts:
      - {name: download-records-output_dir, path: /tmp/outputs/output_dir/data}
      - {name: download-records-pipeline_config, path: /tmp/outputs/pipeline_config/data}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--output-dir", {"outputPath": "output_dir"}, "--pipeline-config",
          {"outputPath": "pipeline_config"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
          exist_ok=True)\n    return file_path\n\ndef download_records(\n    output_dir_path,\n    pipeline_config_path,\n):\n    import
          subprocess\n    import sys\n    subprocess.check_call([sys.executable, \"-m\",
          \"pip\", \"install\", \"requests\"])\n\n    import os, requests\n    os.makedirs(output_dir_path,
          exist_ok=True)\n\n    train_data_path = os.path.join(output_dir_path, ''licence_train.record-00000-of-00001'')\n    with
          open(train_data_path, ''wb'') as file_obj:\n        r = requests.get(''https://www.dropbox.com/s/6ycrfedafx61kt2/licence_train.record-00000-of-00001?dl=0'')\n        file_obj.write(r.content)\n\n    val_data_path
          = os.path.join(output_dir_path, ''licence_val.record-00000-of-00001'')\n    with
          open(val_data_path, ''wb'') as file_obj:\n        r = requests.get(''https://www.dropbox.com/s/6fzvm2xe5dmvcld/licence_val.record-00000-of-00001?dl=0'')\n        file_obj.write(r.content)\n\n    with
          open(pipeline_config_path, ''wb'') as file:\n        r = request.get(\"https://www.dropbox.com/s/33fjknt0p70vpdm/license.py?dl=0\")\n        file.write(r.content)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Download records'', description='''')\n_parser.add_argument(\"--output-dir\",
          dest=\"output_dir_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parser.add_argument(\"--pipeline-config\",
          dest=\"pipeline_config_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = download_records(**_parsed_args)\n"], "image": "python:3.7"}}, "name":
          "Download records", "outputs": [{"name": "output_dir"}, {"name": "pipeline_config"}]}',
        pipelines.kubeflow.org/component_ref: '{}'}
  - name: first-pipeline
    dag:
      tasks:
      - {name: download-records, template: download-records}
      - name: list-dir-files-python-op
        template: list-dir-files-python-op
        dependencies: [download-records]
        arguments:
          parameters:
          - {name: download-records-output_dir, value: '{{tasks.download-records.outputs.parameters.download-records-output_dir}}'}
          - {name: download-records-pipeline_config, value: '{{tasks.download-records.outputs.parameters.download-records-pipeline_config}}'}
  - name: list-dir-files-python-op
    container:
      args: [--input-dir, /tmp/inputs/input_dir/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def list_dir_files_python_op(input_dir_path):
            import os
            dir_items = os.listdir(input_dir_path)
            for dir_item in dir_items:
                print(dir_item)

        import argparse
        _parser = argparse.ArgumentParser(prog='List dir files python op', description='')
        _parser.add_argument("--input-dir", dest="input_dir_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = list_dir_files_python_op(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: download-records-output_dir}
      - {name: download-records-pipeline_config}
      artifacts:
      - name: input_dir
        path: /tmp/inputs/input_dir/data
        raw: {data: '{''output_dir'': {{inputs.parameters.download-records-output_dir}},
            ''pipeline_config'': {{inputs.parameters.download-records-pipeline_config}}}'}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--input-dir", {"inputPath": "input_dir"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def list_dir_files_python_op(input_dir_path):\n    import
          os\n    dir_items = os.listdir(input_dir_path)\n    for dir_item in dir_items:\n        print(dir_item)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''List dir files python
          op'', description='''')\n_parser.add_argument(\"--input-dir\", dest=\"input_dir_path\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = list_dir_files_python_op(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "input_dir"}], "name": "List dir files python op"}',
        pipelines.kubeflow.org/component_ref: '{}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
