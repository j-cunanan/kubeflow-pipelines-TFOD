name: Train eval
inputs:
- {name: pipeline_config}
- {name: record_summaries}
- {name: label_map}
- {name: pretrained_weights}
- {name: data}
- {name: num_train_steps}
outputs:
- {name: model_dir}
implementation:
  container:
    image: jsonmathsai/tf2-odapi:tf2.3.1-gpu
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef train_eval(pipeline_config, \n               record_summaries, \n    \
      \           label_map,\n               pretrained_weights,\n               data,\n\
      \               num_train_steps,\n\n               model_dir):\n    from pathlib\
      \ import Path\n    import subprocess\n    import os\n    import re\n    import\
      \ tarfile\n    import sys\n\n    print(\"Fix TF Official installation\")\n \
      \   subprocess.check_call(\n        [\n            sys.executable,\n       \
      \     \"-m\", \"pip\", \"install\", \n            \"--quiet\", \n          \
      \  \"--no-warn-script-location\", \n            \"tf-models-official==2.3.0\"\
      \n        ],\n    )\n\n    print(\"CPU Model evaluation initializing\")\n  \
      \  env = os.environ.copy()\n    env['CUDA_VISIBLE_DEVICES']=\"\"\n\n    subprocess.Popen(\n\
      \        [\n            sys.executable,\n            'model_main_tf2.py',\n\
      \            '--model_dir',\n            model_dir,\n            '--checkpoint_dir',\n\
      \            model_dir,\n            '--pipeline_config_path',\n           \
      \ pipeline_config,\n        ],\n        env=env\n    )\n\n    print(\"Training\
      \ model\")\n    subprocess.check_call(\n        [\n            sys.executable,\n\
      \            'model_main_tf2.py',\n            '--model_dir',\n            \
      \ model_dir,\n            '--num_train_steps',\n            num_train_steps,\n\
      \            '--pipeline_config_path',\n            pipeline_config,\n     \
      \   ],\n    )\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Train\
      \ eval', description='')\n_parser.add_argument(\"--pipeline-config\", dest=\"\
      pipeline_config\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --record-summaries\", dest=\"record_summaries\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--label-map\", dest=\"label_map\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--pretrained-weights\"\
      , dest=\"pretrained_weights\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--data\", dest=\"data\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--num-train-steps\", dest=\"num_train_steps\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-dir\"\
      , dest=\"model_dir\", type=_make_parent_dirs_and_return_path, required=True,\
      \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n\
      _outputs = train_eval(**_parsed_args)\n"
    args:
    - --pipeline-config
    - {inputPath: pipeline_config}
    - --record-summaries
    - {inputPath: record_summaries}
    - --label-map
    - {inputPath: label_map}
    - --pretrained-weights
    - {inputPath: pretrained_weights}
    - --data
    - {inputPath: data}
    - --num-train-steps
    - {inputValue: num_train_steps}
    - --model-dir
    - {outputPath: model_dir}
