apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: first-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4, pipelines.kubeflow.org/pipeline_compilation_time: '2021-07-16T07:11:17.130860',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "describe this", "inputs":
      [{"default": "https://www.dropbox.com/s/gx9zmtlkjlfg1m5/license.zip?dl=1", "name":
      "data_url", "optional": true}, {"default": "https://www.dropbox.com/s/j18c859mqkzs52o/create_licence_plate_tf_record.py?dl=1",
      "name": "converter_script_url", "optional": true}, {"default": "https://www.dropbox.com/s/jy7bzzgeax9b95t/licence_plate_label_map.pbtxt?dl=1",
      "name": "pbtxt_url", "optional": true}], "name": "First Pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4}
spec:
  entrypoint: first-pipeline
  templates:
  - name: conversion-task
    container:
      args: [--data-url, '{{inputs.parameters.data_url}}', --converter-script-url,
        '{{inputs.parameters.converter_script_url}}', --pbtxt-url, '{{inputs.parameters.pbtxt_url}}',
        --output-dir, /tmp/outputs/output_dir/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def conversion_task(
                    data_url,
                    converter_script_url,
                    pbtxt_url,
                    output_dir,
                            ):

                    """Transforms data from images+xml to TensorFlow records."""

                    import subprocess
                    import sys

                    subprocess.run([
                        'wget',
                        '-O',
                        'data.zip',
                        data_url
                    ],
                    check=True)

                    subprocess.run([
                        'unzip',
                        'data.zip',
                        '-d',
                        'data'
                    ],
                    check=True)

                    subprocess.run([
                        'wget',
                        '-O',
                        'converter.py',
                        converter_script_url
                    ],
                    check=True)

                    subprocess.run([
                        'wget',
                        '-O',
                        'label_map.pbtxt',
                        pbtxt_url
                    ],
                    check=True)

                    subprocess.check_call(
                        [
                            sys.executable,
                            'converter.py',
                            '--data_dir=data',
                            '--label_map_path=label_map.pbtxt',
                            '--output_dir',
                            output_dir
                        ])

        import argparse
        _parser = argparse.ArgumentParser(prog='Conversion task', description='Transforms data from images+xml to TensorFlow records.')
        _parser.add_argument("--data-url", dest="data_url", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--converter-script-url", dest="converter_script_url", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--pbtxt-url", dest="pbtxt_url", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--output-dir", dest="output_dir", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = conversion_task(**_parsed_args)
      image: jsonmathsai/tfodv2:latest
    inputs:
      parameters:
      - {name: converter_script_url}
      - {name: data_url}
      - {name: pbtxt_url}
    outputs:
      artifacts:
      - {name: conversion-task-output_dir, path: /tmp/outputs/output_dir/data}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Transforms
          data from images+xml to TensorFlow records.", "implementation": {"container":
          {"args": ["--data-url", {"inputValue": "data_url"}, "--converter-script-url",
          {"inputValue": "converter_script_url"}, "--pbtxt-url", {"inputValue": "pbtxt_url"},
          "--output-dir", {"outputPath": "output_dir"}], "command": ["sh", "-ec",
          "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef conversion_task(\n            data_url,\n            converter_script_url,\n            pbtxt_url,\n            output_dir,\n                    ):\n\n            \"\"\"Transforms
          data from images+xml to TensorFlow records.\"\"\"\n\n            import
          subprocess\n            import sys\n\n            subprocess.run([\n                ''wget'',\n                ''-O'',\n                ''data.zip'',\n                data_url\n            ],\n            check=True)\n\n            subprocess.run([\n                ''unzip'',\n                ''data.zip'',\n                ''-d'',\n                ''data''\n            ],\n            check=True)\n\n            subprocess.run([\n                ''wget'',\n                ''-O'',\n                ''converter.py'',\n                converter_script_url\n            ],\n            check=True)\n\n            subprocess.run([\n                ''wget'',\n                ''-O'',\n                ''label_map.pbtxt'',\n                pbtxt_url\n            ],\n            check=True)\n\n            subprocess.check_call(\n                [\n                    sys.executable,\n                    ''converter.py'',\n                    ''--data_dir=data'',\n                    ''--label_map_path=label_map.pbtxt'',\n                    ''--output_dir'',\n                    output_dir\n                ])\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Conversion task'', description=''Transforms
          data from images+xml to TensorFlow records.'')\n_parser.add_argument(\"--data-url\",
          dest=\"data_url\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--converter-script-url\",
          dest=\"converter_script_url\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--pbtxt-url\",
          dest=\"pbtxt_url\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-dir\",
          dest=\"output_dir\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = conversion_task(**_parsed_args)\n"], "image": "jsonmathsai/tfodv2:latest"}},
          "inputs": [{"name": "data_url"}, {"name": "converter_script_url"}, {"name":
          "pbtxt_url"}], "name": "Conversion task", "outputs": [{"name": "output_dir"}]}',
        pipelines.kubeflow.org/component_ref: '{"digest": "713e6137f85ef9b3b1e8530675364ce1c35bcaf3af7b09a0725d28c3bb773a39",
          "url": "TFRecordsGen/component.yaml"}', pipelines.kubeflow.org/arguments.parameters: '{"converter_script_url":
          "{{inputs.parameters.converter_script_url}}", "data_url": "{{inputs.parameters.data_url}}",
          "pbtxt_url": "{{inputs.parameters.pbtxt_url}}"}'}
  - name: first-pipeline
    inputs:
      parameters:
      - {name: converter_script_url}
      - {name: data_url}
      - {name: pbtxt_url}
    dag:
      tasks:
      - name: conversion-task
        template: conversion-task
        arguments:
          parameters:
          - {name: converter_script_url, value: '{{inputs.parameters.converter_script_url}}'}
          - {name: data_url, value: '{{inputs.parameters.data_url}}'}
          - {name: pbtxt_url, value: '{{inputs.parameters.pbtxt_url}}'}
      - name: list-dir-files-python-op
        template: list-dir-files-python-op
        dependencies: [conversion-task]
        arguments:
          artifacts:
          - {name: conversion-task-output_dir, from: '{{tasks.conversion-task.outputs.artifacts.conversion-task-output_dir}}'}
  - name: list-dir-files-python-op
    container:
      args: [--input-dir, /tmp/inputs/input_dir/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def list_dir_files_python_op(input_dir_path):
            import os
            dir_items = os.listdir(input_dir_path)
            for dir_item in dir_items:
                print(dir_item)

        import argparse
        _parser = argparse.ArgumentParser(prog='List dir files python op', description='')
        _parser.add_argument("--input-dir", dest="input_dir_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = list_dir_files_python_op(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: conversion-task-output_dir, path: /tmp/inputs/input_dir/data}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.4, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--input-dir", {"inputPath": "input_dir"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def list_dir_files_python_op(input_dir_path):\n    import
          os\n    dir_items = os.listdir(input_dir_path)\n    for dir_item in dir_items:\n        print(dir_item)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''List dir files python
          op'', description='''')\n_parser.add_argument(\"--input-dir\", dest=\"input_dir_path\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = list_dir_files_python_op(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "input_dir"}], "name": "List dir files python op"}',
        pipelines.kubeflow.org/component_ref: '{}'}
  arguments:
    parameters:
    - {name: data_url, value: 'https://www.dropbox.com/s/gx9zmtlkjlfg1m5/license.zip?dl=1'}
    - {name: converter_script_url, value: 'https://www.dropbox.com/s/j18c859mqkzs52o/create_licence_plate_tf_record.py?dl=1'}
    - {name: pbtxt_url, value: 'https://www.dropbox.com/s/jy7bzzgeax9b95t/licence_plate_label_map.pbtxt?dl=1'}
  serviceAccountName: pipeline-runner
